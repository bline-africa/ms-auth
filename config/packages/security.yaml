security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Admin:
            algorithm: auto
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        #app_user_provider:
        admin:
            entity:
                class: App\Entity\Admin
                property: username
        user:
            entity:
                class: App\Entity\User
                property: username
        all_users:
            chain:
                providers: ['admin','user']
    role_hierarchy:
        ROLE_SUPER_ADMIN: ROLE_ADMIN
        ROLE_CREATOR: ROLE_SUPER_ADMIN
        ROLE_ADMIN: 
            - ROLE_MANAGER
            - ROLE_PROVIDER
            - ROLE_CUSTOMER
            - ROLE_ADVISOR
            - ROLE_MARKETING
            - ROLE_SUPPORT
        ROLE_MANAGER:
            - ROLE_SUPPORT
        ROLE_ADVISOR:
            - ROLE_SUPPORT
        ROLE_MARKETING:
            - ROLE_SUPPORT
        ROLE_SUPPORT:
            - ROLE_PROVIDER
            - ROLE_CUSTOMER
    firewalls:
        api_token_refresh:
            pattern: ^/api/token/refresh
            stateless: true
            refresh_jwt: ~
            provider: all_users
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        refresh:
            pattern:  ^/api/token/refresh
            stateless: true
            #anonymous: true
            provider: all_users
            
        admin_login:
            pattern: ^/api/login_admin
            stateless: true
            #anonymous: true
            provider: admin
            json_login:
                check_path: /api/login_admin
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        public:
            security: false
            pattern: ^/(api/profil/list|api/create/user|api/user/validate|api/user/send_code|api/create/openid|api/user/find_user|api/user/find_user_code|api/user/update_user_password|api/provider/list_uuid|api/user/request_account_delete|api/user/enable_all_account|api/user/update_info|api/customer/list_by_range|api/token/logout)
        admin_user:
            pattern: ^/api/login_user
            stateless: true
            #anonymous: true
            provider: user
            json_login:
                check_path: /api/login_user
                success_handler: App\Services\UserServices\LoginUserService
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            provider: all_users
            entry_point: jwt
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh
            logout:
                path: api_token_invalidate

        main:
            #anonymous: true
            #lazy: true
            #provider: app_user_provider
            #json_login:
                #check_path: api_login


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/create/admin, roles: ROLE_CREATOR }
        - { path: ^/api/admin/list, roles: ROLE_SUPER_ADMIN }
        - { path: ^/api/user/list, roles: ROLE_ADMIN }
        - { path: ^/api/user/list_delete_request, roles: ROLE_ADMIN }
        - { path: ^/api/user/confirm_delete_request, roles: ROLE_ADMIN }
        - { path: ^/api/create/profil, roles: ROLE_CREATOR }
        - { path: ^/profile, roles: ROLE_SUPER_ADMIN }
        - { path: ^/api/create/user, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/profil, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/firstadmin, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/firstprofile, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/profil/list, roles:  IS_AUTHENTICATED_ANONYMOUSLY}
        - { path: ^/api/provider/*, roles: ROLE_PROVIDER}
        - { path: ^/api/customer/*, roles: ROLE_CUSTOMER}
        - { path: ^/api/user/list_delete_request, roles: ROLE_PROVIDER }
        - { path: ^/api/user/list_delete_request, roles: ROLE_SUPPORT }
        - { path: ^/api/user/user_history, roles: ROLE_ADMIN}
        - { path: ^/api/user/*, roles: ROLE_ADMIN}
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }
        
        
